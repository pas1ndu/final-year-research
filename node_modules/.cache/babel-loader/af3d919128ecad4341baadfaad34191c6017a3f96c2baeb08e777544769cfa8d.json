{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\fyp-web-app\\\\src\\\\RealTimeCharts.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useFetchRealTimeData } from './useFetchRealTimeData';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, LinearScale } from 'chart.js';\nimport { CategoryScale } from 'chart.js';\nimport { PointElement } from 'chart.js';\nimport { LineElement } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(LineElement);\nChart.register(PointElement);\nChart.register(CategoryScale);\nChart.register(LinearScale);\nfunction RealTimeCharts() {\n  _s();\n  const dataReadings = useFetchRealTimeData();\n  const chartOptions = {\n    responsive: true,\n    scales: {\n      y: {\n        beginAtZero: true,\n        type: 'linear'\n      },\n      x: {\n        type: 'time',\n        time: {\n          unit: 'second'\n        }\n      }\n    }\n  };\n\n  // Using the timestamp from each reading for the x-axis\n  const labels = dataReadings.map(item => item.timestamp);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Consumed Units',\n          data: dataReadings.map(item => item.unitsConsumed),\n          borderColor: 'rgba(75,192,192,1)',\n          borderWidth: 2,\n          fill: false\n        }]\n      },\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Current',\n          data: dataReadings.map(item => item.current),\n          borderColor: 'rgba(255,0,0,1)',\n          borderWidth: 2,\n          fill: false\n        }]\n      },\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Voltage',\n          data: dataReadings.map(item => item.voltage),\n          borderColor: 'rgba(0,0,255,1)',\n          borderWidth: 2,\n          fill: false\n        }]\n      },\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Cumulative Units',\n          data: dataReadings.map(item => item.cumulativeUnits),\n          borderColor: 'rgba(0,255,0,1)',\n          borderWidth: 2,\n          fill: false\n        }]\n      },\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(RealTimeCharts, \"5t8NOht90Se2ZCjHXGNMUYIATwk=\", false, function () {\n  return [useFetchRealTimeData];\n});\n_c = RealTimeCharts;\nexport default RealTimeCharts;\nvar _c;\n$RefreshReg$(_c, \"RealTimeCharts\");","map":{"version":3,"names":["React","useFetchRealTimeData","Line","Chart","LinearScale","CategoryScale","PointElement","LineElement","jsxDEV","_jsxDEV","register","RealTimeCharts","_s","dataReadings","chartOptions","responsive","scales","y","beginAtZero","type","x","time","unit","labels","map","item","timestamp","children","data","datasets","label","unitsConsumed","borderColor","borderWidth","fill","options","fileName","_jsxFileName","lineNumber","columnNumber","current","voltage","cumulativeUnits","_c","$RefreshReg$"],"sources":["C:/Users/HP/fyp-web-app/src/RealTimeCharts.js"],"sourcesContent":["import React from 'react';\r\nimport { useFetchRealTimeData } from './useFetchRealTimeData';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart, LinearScale } from 'chart.js';\r\nimport { CategoryScale } from 'chart.js';\r\nimport { PointElement } from 'chart.js';\r\nimport { LineElement } from 'chart.js';\r\n\r\nChart.register(LineElement);\r\nChart.register(PointElement);\r\nChart.register(CategoryScale);\r\nChart.register(LinearScale);\r\n\r\nfunction RealTimeCharts() {\r\n    const dataReadings = useFetchRealTimeData();\r\n\r\n    const chartOptions = {\r\n        responsive: true,\r\n        scales: {\r\n            y: {\r\n                beginAtZero: true,\r\n                type: 'linear'\r\n            },\r\n            x: {\r\n                type: 'time',\r\n                time: {\r\n                    unit: 'second'\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // Using the timestamp from each reading for the x-axis\r\n    const labels = dataReadings.map(item => item.timestamp); \r\n\r\n    return (\r\n        <div>\r\n            <Line \r\n                data={{\r\n                    labels: labels,\r\n                    datasets: [{\r\n                        label: 'Consumed Units',\r\n                        data: dataReadings.map(item => item.unitsConsumed),\r\n                        borderColor: 'rgba(75,192,192,1)',\r\n                        borderWidth: 2,\r\n                        fill: false\r\n                    }]\r\n                }}\r\n                options={chartOptions}\r\n            />\r\n            <Line \r\n                data={{\r\n                    labels: labels,\r\n                    datasets: [{\r\n                        label: 'Current',\r\n                        data: dataReadings.map(item => item.current),\r\n                        borderColor: 'rgba(255,0,0,1)',\r\n                        borderWidth: 2,\r\n                        fill: false\r\n                    }]\r\n                }}\r\n                options={chartOptions}\r\n            />\r\n            <Line \r\n                data={{\r\n                    labels: labels,\r\n                    datasets: [{\r\n                        label: 'Voltage',\r\n                        data: dataReadings.map(item => item.voltage),\r\n                        borderColor: 'rgba(0,0,255,1)',\r\n                        borderWidth: 2,\r\n                        fill: false\r\n                    }]\r\n                }}\r\n                options={chartOptions}\r\n            />\r\n            <Line \r\n                data={{\r\n                    labels: labels,\r\n                    datasets: [{\r\n                        label: 'Cumulative Units',\r\n                        data: dataReadings.map(item => item.cumulativeUnits),\r\n                        borderColor: 'rgba(0,255,0,1)',\r\n                        borderWidth: 2,\r\n                        fill: false\r\n                    }]\r\n                }}\r\n                options={chartOptions}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RealTimeCharts;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}